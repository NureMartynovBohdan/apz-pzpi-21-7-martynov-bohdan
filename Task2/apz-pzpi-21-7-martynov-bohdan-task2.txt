1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

У ході роботи було розроблено базу даних з використанням реляційної СУБД MySQL. 
MySQL є широко використовуваною системою керування базами даних з відкритим початковим кодом. Функції цієї системи дозволяють виконувати деякий код безпосередньо на сервері бази даних. MySQL підтримує різні мови програмування для написання функцій і процедур зокрема: 
SQL: MySQL підтримує стандартну мову SQL для виконання запитів створення таблиць модифікації даних та управління базою даних.
PHP: MySQL та PHP часто використовуються разом для розробки веб-додатків. PHP може взаємодіяти з базою даних MySQL виконувати запити і обробляти результати.
Java: MySQL має JDBC (Java Database Connectivity) драйвер що дозволяє з'єднуватися з базою даних MySQL виконувати SQL-запити та обробляти результати в Java.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Для реалізації було створено наступні таблиці: 
client: таблиця з даними про клієнтів; 
client_profile: таблиця з профілями клієнтів; 
clothing_items: таблиця з даними про одяг; 
users: таблиця з даними про користувачів.
Графічне подання зв’язків між таблицями бази даних подано на рисунку 2.1.1.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Для написання серверної частини коду в проекті що стосується ідентифікації розмірів одягу клієнтів використовувалися такі технології та бібліотеки:
PHP: мова програмування що часто використовується для розробки веб-додатків. PHP може взаємодіяти з базою даних MySQL виконувати запити та обробляти результати.
MySQL: це система керування базами даних з відкритим початковим кодом. MySQL забезпечує високу продуктивність надійність і легкість у використанні. Функції цієї системи дозволяють виконувати код безпосередньо на сервері бази даних.
Apache: це веб-сервер з відкритим кодом який забезпечує надійність та гнучкість в розгортанні веб-додатків.
XAMPP: це програмний пакет що включає в себе Apache сервер MySQL базу даних та інтерпретатори для скриптових мов PHP і Perl. XAMPP використовується для створення локальних веб-серверів.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для зв'язку з базою даних і визначення моделей у PHP використовується об'єктно-орієнтований підхід. Були розроблені класи які представляють таблиці бази даних і забезпечують зручний інтерфейс для взаємодії з ними.

5 ПОБУДОВА ER-ДІАГРАМИ

Клієнт може мати лише один профіль (відношення one-to-one між client і client_profile).
Клієнт може мати багато записів про одяг (відношення one-to-many між client і clothing_items).
Адміністратор може мати багато клієнтів (відношення one-to-many між users і client).
Адміністратор може додавати багато записів про одяг (відношення one-to-many між users і clothing_items).

6 СПЕЦИФІКАЦІЯ REST

При написанні запитів було обрано архітектурний стиль REST.
Основні принципи REST які використовуються в проєкті включають REST (Representational State Transfer) використовується для створення ефективних та масштабованих API. REST забезпечує надійний обмін даними між клієнтом і сервером що є критично важливим для роботи системи. 
Всі ресурси системи доступні через стандартизовані методи HTTP (GET POST PUT DELETE). Це забезпечує прозорість та передбачуваність взаємодії між клієнтом і сервером. Наприклад для отримання інформації про клієнта використовується метод GET для створення нового клієнта - POST для оновлення даних клієнта - PUT а для видалення клієнта - DELETE.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Діаграма активності відображає процес реєстрації нового клієнта в системі. Клієнт відкриває додаток вибирає мову входить у систему та вводить свої дані. Система перевіряє правильність введених даних. У разі успішної верифікації дані зберігаються у базі створюється профіль клієнта а інформація про розмір одягу додається до профілю. Завершується процес відправкою повідомлення про успішну реєстрацію клієнту.

ВИСНОВКИ

Під час виконання роботи було створено та розроблено серверну частину застосунку підготовлено діаграми визначено REST-специфікацію та записано демонстраційне відео.

ДОДАТОК А

Специфікація REST

Назва         Метод    Шлях                Тіло
Login         POST     /logIn.php          { "email": "string", "password": "string" }
Logout        POST     /logOut.php         {}
Register      POST     /register.php       { "full_name": "string", "email": "string", "password": "string" }
Add Item      POST     /addItem.php        { "item_name": "string", "description": "string", "price": "number", "image": "file" }
Update Item   POST     /update.php         { "item_id": "int", "item_name": "string", "description": "string", "price": "number", "image": "file" }
Delete Item   POST     /delete.php         { "item_id": "int" }
List Clients  GET      /listClient.php     {}
Register Client POST   /registerClient.php { "client_name": "string", "client_email": "string", "password": "string" }
Edit Client   POST     /editForm.php       { "client_id": "int", "client_name": "string", "client_email": "string", "password": "string" }
