1.Архітектура веб-додатка:

Веб-інтерфейс: Забезпечує адміністрування системи, включаючи додавання нових товарів, реєстрацію нових користувачів, управління обліковими записами та зміну мови інтерфейсу. Розроблено на мові PHP з використанням середи розробки Visual Studio Code.
Серверна частина: База даних була реалізовано за допомогою СУБД MySQL для зберігання інформації про користувачів, товари, замовлення та інші дані. XAMPP використовується для розробки та тестування веб-додатка на локальному пристрої.

2. Розроблені функції веб-додатка базуються на наведених нижче бізнес-функціях:

MF-5: Додавання та редагування одягу адміністраторами через веб-інтерфейс: Адміністратори можуть додавати нові товари до системи, оновлювати інформацію про існуючі товари, видаляти застарілі позиції та редагувати дані про товари.
MF-6: Додавання нових клієнтів адміністраторами: Адміністратори можуть реєструвати нових користувачів, управляти їхніми обліковими записами та переглядати списки користувачів з доступом до детальної інформації про кожного.
MF-7: Перегляд списку клієнтів: Адміністратори можуть переглядати список зареєстрованих клієнтів та їх деталі.
MF-9: Зміна мови інтерфейсу: Адміністратори можуть змінювати мову інтерфейсу між українською та англійською для забезпечення комфортного користування системою різними користувачами.

3. UML діаграми:

Розробка системи представлена за допомогою діаграми пакетів яку можна побачити на рисунку 4.1.
UML діаграма пакетів
Опис: Діаграма пакетів відображає структуру основних компонентів системи та їх взаємодію.
Розглянемо діаграму прецедентів, зображену на рисунку 4.2. Адміністратор може занести id пристрою до програмної системи, увімкнути та вимкнути пристрій, а також побачити його статус та дані.
UML діаграма прецедентів
Опис: Діаграма прецедентів відображає взаємодію трьох основних користувачів системи: клієнта, адміністратора та супер адміністратора. Вона показує, які дії можуть виконувати кожен з користувачів у системі.
Також була розроблена діаграма взаємодії для візуалізації взаємодії між різними частинами системи та їх процесу яка зображена на рисунках 4.4-4.7. Так як вона велика я розділю її на частини.
UML діаграма взаємодії
Опис: Діаграма взаємодії візуалізує процеси між різними частинами системи. Вона відображає, як компоненти системи взаємодіють один з одним під час виконання конкретних сценаріїв.
Рисунок 4.4 ілюструє процеси реєстрації та авторизації користувачів у веб-додатку. Для реєстрації користувач вводить свої дані, які перевіряються на правильність та унікальність. Якщо дані валідні і користувач ще не зареєстрований, система зберігає їх у базі даних та перенаправляє на головну сторінку. Процес авторизації включає введення облікових даних користувачем, перевірку правильності запиту та даних, а також перевірку наявності користувача в базі даних. Якщо дані валідні, користувач успішно авторизується і перенаправляється на іншу сторінку.
Схема на рисунку 4.5 представляє процеси, пов'язані з головною сторінкою та навігацією в системі управління. Процес починається з перевірки ролі користувача на головній сторінці (index.php). Якщо користувач є адміном або супер-адміном, відбувається перенаправлення на відповідні сторінки адміністрування.
Дві схеми на рисунку 4.6 показують процеси додавання одягу та клієнтів у системі управління.
Додавання одягу: Процес починається з перевірки ролі користувача на сторінці додавання одягу (addItemForm.php). Якщо користувач не авторизований, його перенаправляють на сторінку авторизації (logInForm). Після успішної авторизації перевіряється роль користувача. Якщо користувач є адміном, його перенаправляють на сторінку адміністрування (indexAdmin.php). Якщо користувач має іншу роль, дані перевіряються та додаються до бази даних. У випадку успішного додавання, користувача перенаправляють на іншу сторінку.
Додавання клієнта: Процес аналогічний додаванню одягу. Починається з перевірки ролі користувача на сторінці додавання клієнта (registerClientForm.php). Неавторизовані користувачі перенаправляються на сторінку авторизації (logInForm). Після успішної авторизації перевіряється роль користувача. Якщо користувач є адміном, його перенаправляють на сторінку адміністрування (indexAdmin.php). Якщо користувач має іншу роль, дані перевіряються та додаються до бази даних. У випадку успішного додавання, користувача перенаправляють на іншу сторінку.
Дві схеми на рисунку 4.7 показують процеси редагування та видалення одягу в системі управління.
Змінення одягу: Процес починається з перевірки ролі адміністратора на сторінці редагування одягу (editForm.php). Якщо користувач має права адміністратора, він може змінити одяг за допомогою форми (edit.php). Після внесення змін перевіряється, чи були вони успішно збережені. Якщо зміни успішні, користувач перенаправляється на головну сторінку (index.php). У випадку помилки користувачу показується повідомлення про помилку, і процес повертається на етап редагування.
Видалення одягу: Процес починається аналогічно: перевіряється роль адміністратора на сторінці видалення одягу (editForm.php). Якщо користувач має права адміністратора, він може видалити одяг за допомогою форми (delete.php). Після видалення перевіряється, чи було воно успішним. Якщо видалення успішне, користувач перенаправляється на головну сторінку (index.php). У випадку помилки користувачу показується повідомлення про помилку, і процес повертається на етап видалення.
